/*
 * CNXT-API
 *
 * The CNXT-API is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2022
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: cnxt@rodenstock.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CNXT.Connector.Client.Client;
using CNXT.Connector.Client.Api;
using CNXT.Connector.Client.Model;

namespace CNXT.Connector.Client.Test
{
    /// <summary>
    ///  Class for testing PatientsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PatientsApiTests
    {
        private PatientsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PatientsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PatientsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' PatientsApi
            //Assert.IsInstanceOf(typeof(PatientsApi), instance);
        }

        
        /// <summary>
        /// Test CreatePatient
        /// </summary>
        [Test]
        public void CreatePatientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PatientInput patientInput = null;
            //var response = instance.CreatePatient(patientInput);
            //Assert.IsInstanceOf(typeof(PatientResponse), response, "response is PatientResponse");
        }
        
        /// <summary>
        /// Test DeletePatient
        /// </summary>
        [Test]
        public void DeletePatientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DeletePatient(id);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test GetPatient
        /// </summary>
        [Test]
        public void GetPatientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> include = null;
            //var response = instance.GetPatient(id, include);
            //Assert.IsInstanceOf(typeof(PatientResponse), response, "response is PatientResponse");
        }
        
        /// <summary>
        /// Test GetPatients
        /// </summary>
        [Test]
        public void GetPatientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int first = null;
            //string after = null;
            //PatientFilter filter = null;
            //List<string> sort = null;
            //List<string> include = null;
            //var response = instance.GetPatients(first, after, filter, sort, include);
            //Assert.IsInstanceOf(typeof(PatientsResponse), response, "response is PatientsResponse");
        }
        
        /// <summary>
        /// Test PatchPatient
        /// </summary>
        [Test]
        public void PatchPatientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PatientInput patientInput = null;
            //var response = instance.PatchPatient(id, patientInput);
            //Assert.IsInstanceOf(typeof(PatientResponse), response, "response is PatientResponse");
        }
        
        /// <summary>
        /// Test UpdatePatient
        /// </summary>
        [Test]
        public void UpdatePatientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //PatientInput patientInput = null;
            //var response = instance.UpdatePatient(id, patientInput);
            //Assert.IsInstanceOf(typeof(PatientResponse), response, "response is PatientResponse");
        }
        
    }

}
