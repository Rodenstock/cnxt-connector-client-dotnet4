/*
 * CNXT-API
 *
 * The CNXT-API is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2022
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: cnxt@rodenstock.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CNXT.Connector.Client.Client;
using CNXT.Connector.Client.Api;
using CNXT.Connector.Client.Model;

namespace CNXT.Connector.Client.Test
{
    /// <summary>
    ///  Class for testing SessionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SessionsApiTests
    {
        private SessionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SessionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SessionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' SessionsApi
            //Assert.IsInstanceOf(typeof(SessionsApi), instance);
        }

        /// <summary>
        /// Test CreateSession
        /// </summary>
        [Test]
        public void CreateSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SessionInput sessionInput = null;
            //var response = instance.CreateSession(id, sessionInput);
            //Assert.IsInstanceOf(typeof(SessionResponse), response, "response is SessionResponse");
        }

        /// <summary>
        /// Test DeleteSession
        /// </summary>
        [Test]
        public void DeleteSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DeleteSession(id);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test GetAssets
        /// </summary>
        [Test]
        public void GetAssetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetAssets(id);
            //Assert.IsInstanceOf(typeof(AssetsResponse), response, "response is AssetsResponse");
        }
        
        /// <summary>
        /// Test GetB2bOptic
        /// </summary>
        [Test]
        public void GetB2bOpticTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string externalId = null;
            //string experimental = null;
            //var response = instance.GetB2bOptic(id, externalId, experimental);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test GetSession
        /// </summary>
        [Test]
        public void GetSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //List<string> include = null;
            //var response = instance.GetSession(id, include);
            //Assert.IsInstanceOf(typeof(SessionResponse), response, "response is SessionResponse");
        }
        
        /// <summary>
        /// Test GetSessions
        /// </summary>
        [Test]
        public void GetSessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int first = null;
            //string after = null;
            //SessionFilter filter = null;
            //List<string> sort = null;
            //List<string> include = null;
            //var response = instance.GetSessions(first, after, filter, sort, include);
            //Assert.IsInstanceOf(typeof(SessionsResponse), response, "response is SessionsResponse");
        }
        
        /// <summary>
        /// Test ImportB2BOptic
        /// </summary>
        [Test]
        public void ImportB2BOpticTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SessionInput sessionInput = null;
            //string externalId = null;
            //string patientId = null;
            //string sessionName = null;
            //string state = null;
            //string origin = null;
            //var response = instance.ImportB2BOptic(id, sessionInput, externalId, patientId, sessionName, state, origin);
            //Assert.IsInstanceOf(typeof(List<string>), response, "response is List<string>");
        }

        /// <summary>
        /// Test ImportB2BOpticAsNewSession
        /// </summary>
        [Test]
        public void ImportB2BOpticAsNewSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SessionInput sessionInput = null;
            //string sessionId = null;
            //string externalId = null;
            //string patientId = null;
            //string sessionName = null;
            //string state = null;
            //string origin = null;
            //var response = instance.ImportB2BOpticAsNewSession(sessionInput, sessionId, externalId, patientId, sessionName, state, origin);
            //Assert.IsInstanceOf(typeof(List<string>), response, "response is List<string>");
        }

        /// <summary>
        /// Test PatchSession
        /// </summary>
        [Test]
        public void PatchSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SessionInput sessionInput = null;
            //var response = instance.PatchSession(id, sessionInput);
            //Assert.IsInstanceOf(typeof(SessionResponse), response, "response is SessionResponse");
        }

        /// <summary>
        /// Test UpdateSession
        /// </summary>
        [Test]
        public void UpdateSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //SessionInput sessionInput = null;
            //var response = instance.UpdateSession(id, sessionInput);
            //Assert.IsInstanceOf(typeof(SessionResponse), response, "response is SessionResponse");
        }

    }

}
