/* 
 * CNXT®-Connector
 *
 * The CNXT<sup>®</sup>-Connector is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2020
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: cnxt@rodenstock.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CNXT.Connector.Client.Client.OpenAPIDateConverter;

namespace CNXT.Connector.Client.Model
{
    /// <summary>
    /// AssetsResponseLinks
    /// </summary>
    [DataContract]
    public partial class AssetsResponseLinks :  IEquatable<AssetsResponseLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsResponseLinks" /> class.
        /// </summary>
        /// <param name="dneyescanner">dneyescanner.</param>
        /// <param name="impressionist">impressionist.</param>
        public AssetsResponseLinks(AssetsResponseLinksDneyescanner dneyescanner = default(AssetsResponseLinksDneyescanner), AssetsResponseLinksImpressionist impressionist = default(AssetsResponseLinksImpressionist))
        {
            this.Dneyescanner = dneyescanner;
            this.Impressionist = impressionist;
        }
        
        /// <summary>
        /// Gets or Sets Dneyescanner
        /// </summary>
        [DataMember(Name="dneyescanner", EmitDefaultValue=false)]
        public AssetsResponseLinksDneyescanner Dneyescanner { get; set; }

        /// <summary>
        /// Gets or Sets Impressionist
        /// </summary>
        [DataMember(Name="impressionist", EmitDefaultValue=false)]
        public AssetsResponseLinksImpressionist Impressionist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetsResponseLinks {\n");
            sb.Append("  Dneyescanner: ").Append(Dneyescanner).Append("\n");
            sb.Append("  Impressionist: ").Append(Impressionist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetsResponseLinks);
        }

        /// <summary>
        /// Returns true if AssetsResponseLinks instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetsResponseLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetsResponseLinks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dneyescanner == input.Dneyescanner ||
                    (this.Dneyescanner != null &&
                    this.Dneyescanner.Equals(input.Dneyescanner))
                ) && 
                (
                    this.Impressionist == input.Impressionist ||
                    (this.Impressionist != null &&
                    this.Impressionist.Equals(input.Impressionist))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dneyescanner != null)
                    hashCode = hashCode * 59 + this.Dneyescanner.GetHashCode();
                if (this.Impressionist != null)
                    hashCode = hashCode * 59 + this.Impressionist.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
