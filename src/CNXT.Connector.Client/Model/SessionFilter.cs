/* 
 * CNXT-Connector
 *
 * The CNXT-Connector is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2020
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: cnxt@rodenstock.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CNXT.Connector.Client.Client.OpenAPIDateConverter;

namespace CNXT.Connector.Client.Model
{
    /// <summary>
    /// Represents a patient filter for querying sessions.
    /// </summary>
    [DataContract]
    public partial class SessionFilter :  IEquatable<SessionFilter>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public SessionState? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionFilter" /> class.
        /// </summary>
        /// <param name="externalId">Used for finding sessions by external ID, which is assigned to the session in a 3rd party application.</param>
        /// <param name="createdAfter">Used for finding sessions whose date of creation is after the specified date time.</param>
        /// <param name="updatedAfter">Used for finding sessions whose date of modification is after the specified date time.</param>
        /// <param name="state">state.</param>
        public SessionFilter(string externalId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? updatedAfter = default(DateTime?), SessionState state = default(SessionState))
        {
            this.ExternalId = externalId;
            this.CreatedAfter = createdAfter;
            this.UpdatedAfter = updatedAfter;
            this.State = state;
        }
        
        /// <summary>
        /// Used for finding sessions by external ID, which is assigned to the session in a 3rd party application
        /// </summary>
        /// <value>Used for finding sessions by external ID, which is assigned to the session in a 3rd party application</value>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Used for finding sessions whose date of creation is after the specified date time
        /// </summary>
        /// <value>Used for finding sessions whose date of creation is after the specified date time</value>
        [DataMember(Name="createdAfter", EmitDefaultValue=true)]
        public DateTime? CreatedAfter { get; set; }

        /// <summary>
        /// Used for finding sessions whose date of modification is after the specified date time
        /// </summary>
        /// <value>Used for finding sessions whose date of modification is after the specified date time</value>
        [DataMember(Name="updatedAfter", EmitDefaultValue=true)]
        public DateTime? UpdatedAfter { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionFilter {\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  CreatedAfter: ").Append(CreatedAfter).Append("\n");
            sb.Append("  UpdatedAfter: ").Append(UpdatedAfter).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SessionFilter);
        }

        /// <summary>
        /// Returns true if SessionFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of SessionFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionFilter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.CreatedAfter == input.CreatedAfter ||
                    (this.CreatedAfter != null &&
                    this.CreatedAfter.Equals(input.CreatedAfter))
                ) && 
                (
                    this.UpdatedAfter == input.UpdatedAfter ||
                    (this.UpdatedAfter != null &&
                    this.UpdatedAfter.Equals(input.UpdatedAfter))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.CreatedAfter != null)
                    hashCode = hashCode * 59 + this.CreatedAfter.GetHashCode();
                if (this.UpdatedAfter != null)
                    hashCode = hashCode * 59 + this.UpdatedAfter.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
