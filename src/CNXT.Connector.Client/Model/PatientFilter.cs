/* 
 * CNXT®-Connector
 *
 * The CNXT<sup>®</sup>-Connector is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2020
 *
 * The version of the OpenAPI document: 1.0.5
 * Contact: cnxt@rodenstock.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CNXT.Connector.Client.Client.OpenAPIDateConverter;

namespace CNXT.Connector.Client.Model
{
    /// <summary>
    /// Represents a patient filter for querying patients
    /// </summary>
    [DataContract]
    public partial class PatientFilter :  IEquatable<PatientFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatientFilter" /> class.
        /// </summary>
        /// <param name="search">Full text search parameter which is used for finding patients by first name or last name.</param>
        /// <param name="firstName">First name which is used for finding patients by first name.</param>
        /// <param name="lastName">Last name which is used for finding patients by last name.</param>
        /// <param name="dateOfBirth">Date of birth which is used for finding patients by date of birth.</param>
        /// <param name="sessionUpdatedAfter">Used for finding patients whose sessions have been updated after the specified date time.</param>
        /// <param name="createdAfter">Used for finding patients whose date of creation is after the specified date time.</param>
        /// <param name="updatedAfter">Used for finding patients whose date of modification is after the specified date time.</param>
        public PatientFilter(string search = default(string), string firstName = default(string), string lastName = default(string), DateTime? dateOfBirth = default(DateTime?), DateTime? sessionUpdatedAfter = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? updatedAfter = default(DateTime?))
        {
            this.Search = search;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.DateOfBirth = dateOfBirth;
            this.SessionUpdatedAfter = sessionUpdatedAfter;
            this.CreatedAfter = createdAfter;
            this.UpdatedAfter = updatedAfter;
        }
        
        /// <summary>
        /// Full text search parameter which is used for finding patients by first name or last name
        /// </summary>
        /// <value>Full text search parameter which is used for finding patients by first name or last name</value>
        [DataMember(Name="search", EmitDefaultValue=false)]
        public string Search { get; set; }

        /// <summary>
        /// First name which is used for finding patients by first name
        /// </summary>
        /// <value>First name which is used for finding patients by first name</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name which is used for finding patients by last name
        /// </summary>
        /// <value>Last name which is used for finding patients by last name</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Date of birth which is used for finding patients by date of birth
        /// </summary>
        /// <value>Date of birth which is used for finding patients by date of birth</value>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// Used for finding patients whose sessions have been updated after the specified date time
        /// </summary>
        /// <value>Used for finding patients whose sessions have been updated after the specified date time</value>
        [DataMember(Name="sessionUpdatedAfter", EmitDefaultValue=true)]
        public DateTime? SessionUpdatedAfter { get; set; }

        /// <summary>
        /// Used for finding patients whose date of creation is after the specified date time
        /// </summary>
        /// <value>Used for finding patients whose date of creation is after the specified date time</value>
        [DataMember(Name="createdAfter", EmitDefaultValue=true)]
        public DateTime? CreatedAfter { get; set; }

        /// <summary>
        /// Used for finding patients whose date of modification is after the specified date time
        /// </summary>
        /// <value>Used for finding patients whose date of modification is after the specified date time</value>
        [DataMember(Name="updatedAfter", EmitDefaultValue=true)]
        public DateTime? UpdatedAfter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatientFilter {\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  SessionUpdatedAfter: ").Append(SessionUpdatedAfter).Append("\n");
            sb.Append("  CreatedAfter: ").Append(CreatedAfter).Append("\n");
            sb.Append("  UpdatedAfter: ").Append(UpdatedAfter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatientFilter);
        }

        /// <summary>
        /// Returns true if PatientFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of PatientFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatientFilter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Search == input.Search ||
                    (this.Search != null &&
                    this.Search.Equals(input.Search))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.SessionUpdatedAfter == input.SessionUpdatedAfter ||
                    (this.SessionUpdatedAfter != null &&
                    this.SessionUpdatedAfter.Equals(input.SessionUpdatedAfter))
                ) && 
                (
                    this.CreatedAfter == input.CreatedAfter ||
                    (this.CreatedAfter != null &&
                    this.CreatedAfter.Equals(input.CreatedAfter))
                ) && 
                (
                    this.UpdatedAfter == input.UpdatedAfter ||
                    (this.UpdatedAfter != null &&
                    this.UpdatedAfter.Equals(input.UpdatedAfter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Search != null)
                    hashCode = hashCode * 59 + this.Search.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.SessionUpdatedAfter != null)
                    hashCode = hashCode * 59 + this.SessionUpdatedAfter.GetHashCode();
                if (this.CreatedAfter != null)
                    hashCode = hashCode * 59 + this.CreatedAfter.GetHashCode();
                if (this.UpdatedAfter != null)
                    hashCode = hashCode * 59 + this.UpdatedAfter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
