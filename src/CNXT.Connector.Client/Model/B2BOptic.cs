/*
 * CNXT-API
 *
 * The CNXT-API is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2022
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: cnxt@rodenstock.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CNXT.Connector.Client.Client.OpenAPIDateConverter;

namespace CNXT.Connector.Client.Model
{
    /// <summary>
    /// Represents B2BOptic related data
    /// </summary>
    [DataContract]
    public partial class B2BOptic :  IEquatable<B2BOptic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="B2BOptic" /> class.
        /// </summary>
        /// <param name="xml">Represents the B2BOptic related data as XML Document.</param>
        /// <param name="json">Represents the B2BOptic related data as JSON.</param>
        public B2BOptic(string xml = default(string), string json = default(string))
        {
            this.Xml = xml;
            this.Json = json;
        }

        /// <summary>
        /// Represents the B2BOptic related data as XML Document
        /// </summary>
        /// <value>Represents the B2BOptic related data as XML Document</value>
        [DataMember(Name="xml", EmitDefaultValue=false)]
        public string Xml { get; set; }

        /// <summary>
        /// Represents the B2BOptic related data as JSON
        /// </summary>
        /// <value>Represents the B2BOptic related data as JSON</value>
        [DataMember(Name="json", EmitDefaultValue=false)]
        public string Json { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class B2BOptic {\n");
            sb.Append("  Xml: ").Append(Xml).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as B2BOptic);
        }

        /// <summary>
        /// Returns true if B2BOptic instances are equal
        /// </summary>
        /// <param name="input">Instance of B2BOptic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(B2BOptic input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Xml == input.Xml ||
                    (this.Xml != null &&
                    this.Xml.Equals(input.Xml))
                ) && 
                (
                    this.Json == input.Json ||
                    (this.Json != null &&
                    this.Json.Equals(input.Json))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Xml != null)
                    hashCode = hashCode * 59 + this.Xml.GetHashCode();
                if (this.Json != null)
                    hashCode = hashCode * 59 + this.Json.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
