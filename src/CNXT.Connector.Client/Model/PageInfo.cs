/*
 * CNXT-API
 *
 * The CNXT-API is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2022
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: cnxt@rodenstock.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CNXT.Connector.Client.Client.OpenAPIDateConverter;

namespace CNXT.Connector.Client.Model
{
    /// <summary>
    /// Represents pagination information
    /// </summary>
    [DataContract]
    public partial class PageInfo :  IEquatable<PageInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageInfo" /> class.
        /// </summary>
        /// <param name="hasPreviousPage">True if and only if this page is not the first page.</param>
        /// <param name="hasNextPage">True if and only if this page is not the last page.</param>
        /// <param name="startCursor">Cursor to the first edge, or null if this page is empty.</param>
        /// <param name="endCursor">Cursor to the last edge, or null if this page is empty.</param>
        public PageInfo(bool hasPreviousPage = default(bool), bool hasNextPage = default(bool), string startCursor = default(string), string endCursor = default(string))
        {
            this.HasPreviousPage = hasPreviousPage;
            this.HasNextPage = hasNextPage;
            this.StartCursor = startCursor;
            this.EndCursor = endCursor;
        }

        /// <summary>
        /// True if and only if this page is not the first page
        /// </summary>
        /// <value>True if and only if this page is not the first page</value>
        [DataMember(Name="hasPreviousPage", EmitDefaultValue=false)]
        public bool HasPreviousPage { get; set; }

        /// <summary>
        /// True if and only if this page is not the last page
        /// </summary>
        /// <value>True if and only if this page is not the last page</value>
        [DataMember(Name="hasNextPage", EmitDefaultValue=false)]
        public bool HasNextPage { get; set; }

        /// <summary>
        /// Cursor to the first edge, or null if this page is empty
        /// </summary>
        /// <value>Cursor to the first edge, or null if this page is empty</value>
        [DataMember(Name="startCursor", EmitDefaultValue=false)]
        public string StartCursor { get; set; }

        /// <summary>
        /// Cursor to the last edge, or null if this page is empty
        /// </summary>
        /// <value>Cursor to the last edge, or null if this page is empty</value>
        [DataMember(Name="endCursor", EmitDefaultValue=false)]
        public string EndCursor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PageInfo {\n");
            sb.Append("  HasPreviousPage: ").Append(HasPreviousPage).Append("\n");
            sb.Append("  HasNextPage: ").Append(HasNextPage).Append("\n");
            sb.Append("  StartCursor: ").Append(StartCursor).Append("\n");
            sb.Append("  EndCursor: ").Append(EndCursor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PageInfo);
        }

        /// <summary>
        /// Returns true if PageInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PageInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PageInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HasPreviousPage == input.HasPreviousPage ||
                    (this.HasPreviousPage != null &&
                    this.HasPreviousPage.Equals(input.HasPreviousPage))
                ) && 
                (
                    this.HasNextPage == input.HasNextPage ||
                    (this.HasNextPage != null &&
                    this.HasNextPage.Equals(input.HasNextPage))
                ) && 
                (
                    this.StartCursor == input.StartCursor ||
                    (this.StartCursor != null &&
                    this.StartCursor.Equals(input.StartCursor))
                ) && 
                (
                    this.EndCursor == input.EndCursor ||
                    (this.EndCursor != null &&
                    this.EndCursor.Equals(input.EndCursor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HasPreviousPage != null)
                    hashCode = hashCode * 59 + this.HasPreviousPage.GetHashCode();
                if (this.HasNextPage != null)
                    hashCode = hashCode * 59 + this.HasNextPage.GetHashCode();
                if (this.StartCursor != null)
                    hashCode = hashCode * 59 + this.StartCursor.GetHashCode();
                if (this.EndCursor != null)
                    hashCode = hashCode * 59 + this.EndCursor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
