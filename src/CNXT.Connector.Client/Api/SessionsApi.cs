/*
 * CNXT-API
 *
 * The CNXT-API is developed by Rodenstock GmbH to integrate data from measurement devices such as DNEye<sup>®</sup> Scanner, Rodenstock Fundus Scanner, and ImpressionIST<sup>®</sup> into 3rd party applications as well as into several applications of Rodenstock such as WinFit, Rodenstock Consulting etc. If you have any feedback then please feel free to contact us via email. Copyright © Rodenstock GmbH 2022
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: cnxt@rodenstock.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using CNXT.Connector.Client.Client;
using CNXT.Connector.Client.Model;
using System.Reflection;
using System.Text.RegularExpressions;

namespace CNXT.Connector.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// Creates a session which is assigned to an existing patient via Patient id. If the patient does not exist with the given patient id, a new patient is created and the new session is associated accordingly.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionInput">The session to create.</param>
        /// <param name="origin">Name of the origin (optional)</param>
        /// <returns>SessionResponse</returns>
        SessionResponse CreateSession (SessionInput sessionInput, string origin = default(string));

        /// <summary>
        /// Creates a session which is assigned to an existing patient via Patient id. If the patient does not exist with the given patient id, a new patient is created and the new session is associated accordingly.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionInput">The session to create.</param>
        /// <param name="origin">Name of the origin (optional)</param>
        /// <returns>ApiResponse of SessionResponse</returns>
        ApiResponse<SessionResponse> CreateSessionWithHttpInfo (SessionInput sessionInput, string origin = default(string));

        /// <summary>
        /// Deletes a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <returns>string</returns>
        string DeleteSession (string id);

        /// <summary>
        /// Deletes a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteSessionWithHttpInfo (string id);
        /// <summary>
        /// Retrieves available assets (images taken by ImpressionIST®, DNEye® Scanner, Rodenstock Fundus Scanner etc.) according to the defined session ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <returns>AssetsResponse</returns>
        AssetsResponse GetAssets (string id);

        /// <summary>
        /// Retrieves available assets (images taken by ImpressionIST®, DNEye® Scanner, Rodenstock Fundus Scanner etc.) according to the defined session ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <returns>ApiResponse of AssetsResponse</returns>
        ApiResponse<AssetsResponse> GetAssetsWithHttpInfo (string id);
        /// <summary>
        /// Retrieves a session by ID represented as B2BOptic XML document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <param name="externalId">External ID of the session (optional)</param>
        /// <param name="experimental">Export experimental elements in B2BOptic XML   (Supported values: true or false).   The default value is set to true. (optional)</param>
        /// <returns>string</returns>
        string GetB2bOptic (string id, string externalId = default(string), string experimental = default(string));

        /// <summary>
        /// Retrieves a session by ID represented as B2BOptic XML document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <param name="externalId">External ID of the session (optional)</param>
        /// <param name="experimental">Export experimental elements in B2BOptic XML   (Supported values: true or false).   The default value is set to true. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetB2bOpticWithHttpInfo (string id, string externalId = default(string), string experimental = default(string));
        /// <summary>
        /// Retrieves a session by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <param name="include">List of related resources for including relationships directly into session such as B2BOptic or Patient.  (Supported values: b2boptic, patient) (optional)</param>
        /// <returns>SessionResponse</returns>
        SessionResponse GetSession (string id, List<string> include = default(List<string>));

        /// <summary>
        /// Retrieves a session by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <param name="include">List of related resources for including relationships directly into session such as B2BOptic or Patient.  (Supported values: b2boptic, patient) (optional)</param>
        /// <returns>ApiResponse of SessionResponse</returns>
        ApiResponse<SessionResponse> GetSessionWithHttpInfo (string id, List<string> include = default(List<string>));
        /// <summary>
        /// Retrieves a list of sessions. This endpoint implements pagination by using links. Additionally, it is possible to filter by parameters such as patientId, externalId, createdAfter, updatedAfter, hasDNEyeData, hasImpressionISTData, hasRxData or to sort in ascending or descending order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="first">Read the first n sessions of the set. The default and maximum value is set to 25 sessions per request.</param>
        /// <param name="after">Read all sessions in the set after (below) this cursor. (optional)</param>
        /// <param name="filter">Filter session by parameters e.g. patientId, externalId, state, createdAfter, updatedAfter, hasDNEyeData, hasImpressionISTData, or hasRxData. CreatedAfter is used for filtering sessions which are created after a specified date. UpdatedAfter is used for filtering sessions which are updated after a specified date.  (Supported values: patientId, externalId, createdAfter, updatedAfter, state, hasDNEyeData, hasImpressionISTData, hasRxData).    A state has the following supported values: (OPEN, CLOSED, ORDERED, EXPORTED, SAVED) (optional)</param>
        /// <param name="sort">List of parameters to sort sessions by parameter.  (Supported values: createdAt, updatedAt).    To sort descending add a &#39;-&#39; as prefix e.g. (-createdAt, -updatedAt). (optional)</param>
        /// <param name="include">List of related resources for including relationships directly into session such as Patient.  (Supported values: patient) (optional)</param>
        /// <returns>SessionsResponse</returns>
        SessionsResponse GetSessions (int first, string after = default(string), SessionFilter filter = default(SessionFilter), List<string> sort = default(List<string>), List<string> include = default(List<string>));

        /// <summary>
        /// Retrieves a list of sessions. This endpoint implements pagination by using links. Additionally, it is possible to filter by parameters such as patientId, externalId, createdAfter, updatedAfter, hasDNEyeData, hasImpressionISTData, hasRxData or to sort in ascending or descending order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="first">Read the first n sessions of the set. The default and maximum value is set to 25 sessions per request.</param>
        /// <param name="after">Read all sessions in the set after (below) this cursor. (optional)</param>
        /// <param name="filter">Filter session by parameters e.g. patientId, externalId, state, createdAfter, updatedAfter, hasDNEyeData, hasImpressionISTData, or hasRxData. CreatedAfter is used for filtering sessions which are created after a specified date. UpdatedAfter is used for filtering sessions which are updated after a specified date.  (Supported values: patientId, externalId, createdAfter, updatedAfter, state, hasDNEyeData, hasImpressionISTData, hasRxData).    A state has the following supported values: (OPEN, CLOSED, ORDERED, EXPORTED, SAVED) (optional)</param>
        /// <param name="sort">List of parameters to sort sessions by parameter.  (Supported values: createdAt, updatedAt).    To sort descending add a &#39;-&#39; as prefix e.g. (-createdAt, -updatedAt). (optional)</param>
        /// <param name="include">List of related resources for including relationships directly into session such as Patient.  (Supported values: patient) (optional)</param>
        /// <returns>ApiResponse of SessionsResponse</returns>
        ApiResponse<SessionsResponse> GetSessionsWithHttpInfo (int first, string after = default(string), SessionFilter filter = default(SessionFilter), List<string> sort = default(List<string>), List<string> include = default(List<string>));
        
        /// <summary>
        /// Updates a session or imports a B2BOptic XML document defined by the session ID. This B2BOptic XML document is assigned to an existing session via the defined session ID or assigned to this patient as a new session via the specified id of the session and specified first name, last name, or date of birth of the patient.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session that needs to import data from B2BOptic XML document.</param>
        /// <param name="body">The session to update.</param>
        /// <param name="externalId">External ID of a session used in a 3rd party application to make it referenceable in CNXT (optional)</param>
        /// <param name="patientId">ID of the patient (optional)</param>
        /// <param name="sessionName">Name of the session (optional)</param>
        /// <param name="state">State of the session that needs to import data from B2BOptic XML document.  (Supported values: OPEN, CLOSED, ORDERED, EXPORTED, SAVED) (optional)</param>
        /// <param name="origin">Name of the origin (optional)</param>
        /// <returns>List<string></returns>
        List<string> ImportB2BOptic (string id, string body, string externalId = default(string), string patientId = default(string), string sessionName = default(string), string state = default(string), string origin = default(string));

        /// <summary>
        /// Updates a session or imports a B2BOptic XML document defined by the session ID. This B2BOptic XML document is assigned to an existing session via the defined session ID or assigned to this patient as a new session via the specified id of the session and specified first name, last name, or date of birth of the patient.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session that needs to import data from B2BOptic XML document.</param>
        /// <param name="body">The session to update.</param>
        /// <param name="externalId">External ID of a session used in a 3rd party application to make it referenceable in CNXT (optional)</param>
        /// <param name="patientId">ID of the patient (optional)</param>
        /// <param name="sessionName">Name of the session (optional)</param>
        /// <param name="state">State of the session that needs to import data from B2BOptic XML document.  (Supported values: OPEN, CLOSED, ORDERED, EXPORTED, SAVED) (optional)</param>
        /// <param name="origin">Name of the origin (optional)</param>
        /// <returns>ApiResponse of List<string></returns>
        ApiResponse<List<string>> ImportB2BOpticWithHttpInfo (string id, string body, string externalId = default(string), string patientId = default(string), string sessionName = default(string), string state = default(string), string origin = default(string));
        /// <summary>
        /// Creates a session or imports a B2BOptic XML document as a new session which is assigned to an existing patient via Patient id. If the patient does not exist with the given patient id, a new patient is created and the new session is associated accordingly.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The session to create.</param>
        /// <param name="sessionId">Session ID as UUID used in a 3rd party application to make it referenceable in CNXT (optional)</param>
        /// <param name="externalId">External ID of a session used in a 3rd party application to make it referenceable in CNXT (optional)</param>
        /// <param name="patientId">ID of the patient (optional)</param>
        /// <param name="sessionName">Name of the session (optional)</param>
        /// <param name="state">State of the session that needs to import data from B2BOptic XML document.  (Supported values: OPEN, CLOSED, ORDERED, EXPORTED, SAVED) (optional)</param>
        /// <param name="origin">Name of the origin (optional)</param>
        /// <returns>List<string></returns>
        List<string> ImportB2BOpticAsNewSession (string body, string sessionId = default(string), string externalId = default(string), string patientId = default(string), string sessionName = default(string), string state = default(string), string origin = default(string));

        /// <summary>
        /// Creates a session or imports a B2BOptic XML document as a new session which is assigned to an existing patient via Patient id. If the patient does not exist with the given patient id, a new patient is created and the new session is associated accordingly.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The session to create.</param>
        /// <param name="sessionId">Session ID as UUID used in a 3rd party application to make it referenceable in CNXT (optional)</param>
        /// <param name="externalId">External ID of a session used in a 3rd party application to make it referenceable in CNXT (optional)</param>
        /// <param name="patientId">ID of the patient (optional)</param>
        /// <param name="sessionName">Name of the session (optional)</param>
        /// <param name="state">State of the session that needs to import data from B2BOptic XML document.  (Supported values: OPEN, CLOSED, ORDERED, EXPORTED, SAVED) (optional)</param>
        /// <param name="origin">Name of the origin (optional)</param>
        /// <returns>ApiResponse of List<string></returns>
        ApiResponse<List<string>> ImportB2BOpticAsNewSessionWithHttpInfo (string body, string sessionId = default(string), string externalId = default(string), string patientId = default(string), string sessionName = default(string), string state = default(string), string origin = default(string));
        
        /// <summary>
        /// Updates a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session that needs to update.</param>
        /// <param name="sessionInput">The session to update.</param>
        /// <param name="origin">Name of the origin (optional)</param>
        /// <returns>SessionResponse</returns>
        SessionResponse UpdateSession (string id, SessionInput sessionInput, string origin = default(string));

        /// <summary>
        /// Updates a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session that needs to update.</param>
        /// <param name="sessionInput">The session to update.</param>
        /// <param name="origin">Name of the origin (optional)</param>
        /// <returns>ApiResponse of SessionResponse</returns>
        ApiResponse<SessionResponse> UpdateSessionWithHttpInfo (string id, SessionInput sessionInput, string origin = default(string));

        /// <summary>
        /// Patches a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <param name="sessionInput">The session to patch.</param>
        /// <returns>SessionResponse</returns>
        SessionResponse PatchSession (string id, SessionInput sessionInput);

        /// <summary>
        /// Patches a session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <param name="sessionInput">The session to patch.</param>
        /// <returns>ApiResponse of SessionResponse</returns>
        ApiResponse<SessionResponse> PatchSessionWithHttpInfo (string id, SessionInput sessionInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SessionsApi : ISessionsApi
    {
        private CNXT.Connector.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionsApi(String basePath)
        {
            this.Configuration = new CNXT.Connector.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CNXT.Connector.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public SessionsApi()
        {
            this.Configuration = CNXT.Connector.Client.Client.Configuration.Default;

            ExceptionFactory = CNXT.Connector.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SessionsApi(CNXT.Connector.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CNXT.Connector.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CNXT.Connector.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CNXT.Connector.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CNXT.Connector.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a session which is assigned to an existing patient via Patient id. If the patient does not exist with the given patient id, a new patient is created and the new session is associated accordingly. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionInput">The session to create.</param>
        /// <param name="origin">Name of the origin (optional)</param>
        /// <returns>SessionResponse</returns>
        public SessionResponse CreateSession (SessionInput sessionInput, string origin = default(string))
        {
             ApiResponse<SessionResponse> localVarResponse = CreateSessionWithHttpInfo(sessionInput, origin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a session which is assigned to an existing patient via Patient id. If the patient does not exist with the given patient id, a new patient is created and the new session is associated accordingly. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionInput">The session to create.</param>
        /// <param name="origin">Name of the origin (optional)</param>
        /// <returns>ApiResponse of SessionResponse</returns>
        public ApiResponse<SessionResponse> CreateSessionWithHttpInfo (SessionInput sessionInput, string origin = default(string))
        {
            // verify the required parameter 'sessionInput' is set
            if (sessionInput == null)
                throw new ApiException(400, "Missing required parameter 'sessionInput' when calling SessionsApi->CreateSession");

            var localVarPath = "/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (origin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "origin", origin)); // query parameter
            if (sessionInput != null && sessionInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sessionInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sessionInput; // byte array
            }

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionResponse)));
        }

        /// <summary>
        /// Deletes a session. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <returns>string</returns>
        public string DeleteSession (string id)
        {
             ApiResponse<string> localVarResponse = DeleteSessionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a session. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> DeleteSessionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionsApi->DeleteSession");

            var localVarPath = "/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Retrieves available assets (images taken by ImpressionIST®, DNEye® Scanner, Rodenstock Fundus Scanner etc.) according to the defined session ID. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <returns>AssetsResponse</returns>
        public AssetsResponse GetAssets (string id)
        {
             ApiResponse<AssetsResponse> localVarResponse = GetAssetsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves available assets (images taken by ImpressionIST®, DNEye® Scanner, Rodenstock Fundus Scanner etc.) according to the defined session ID. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <returns>ApiResponse of AssetsResponse</returns>
        public ApiResponse<AssetsResponse> GetAssetsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionsApi->GetAssets");

            var localVarPath = "/remote/sessions/{id}/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetsResponse)));
        }

        /// <summary>
        /// Retrieves a session by ID represented as B2BOptic XML document. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <param name="externalId">External ID of the session (optional)</param>
        /// <param name="experimental">Export experimental elements in B2BOptic XML   (Supported values: true or false).   The default value is set to true. (optional)</param>
        /// <returns>string</returns>
        public string GetB2bOptic (string id, string externalId = default(string), string experimental = default(string))
        {
             ApiResponse<string> localVarResponse = GetB2bOpticWithHttpInfo(id, externalId, experimental);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a session by ID represented as B2BOptic XML document. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <param name="externalId">External ID of the session (optional)</param>
        /// <param name="experimental">Export experimental elements in B2BOptic XML   (Supported values: true or false).   The default value is set to true. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> GetB2bOpticWithHttpInfo (string id, string externalId = default(string), string experimental = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionsApi->GetB2bOptic");

            var localVarPath = "/sessions/{id}/b2boptic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/x.b2boptic.jobdata+xml",
                "application/x.b2boptic.jobdata+xml;version=1.6.3",
                "application/x.b2boptic.lensorder+xml",
                "application/x.b2boptic.lensorder+xml;version=1.6.3"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (externalId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalId", externalId)); // query parameter
            if (experimental != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "experimental", experimental)); // query parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetB2bOptic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Retrieves a session by ID. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <param name="include">List of related resources for including relationships directly into session such as B2BOptic or Patient.  (Supported values: b2boptic, patient) (optional)</param>
        /// <returns>SessionResponse</returns>
        public SessionResponse GetSession (string id, List<string> include = default(List<string>))
        {
             ApiResponse<SessionResponse> localVarResponse = GetSessionWithHttpInfo(id, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a session by ID. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <param name="include">List of related resources for including relationships directly into session such as B2BOptic or Patient.  (Supported values: b2boptic, patient) (optional)</param>
        /// <returns>ApiResponse of SessionResponse</returns>
        public ApiResponse<SessionResponse> GetSessionWithHttpInfo (string id, List<string> include = default(List<string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionsApi->GetSession");

            var localVarPath = "/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "include", include)); // query parameter

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionResponse)));
        }

        /// <summary>
        /// Retrieves a list of sessions. This endpoint implements pagination by using links. Additionally, it is possible to filter by parameters such as patientId, externalId, createdAfter, updatedAfter, hasDNEyeData, hasImpressionISTData, hasRxData or to sort in ascending or descending order. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="first">Read the first n sessions of the set. The default and maximum value is set to 25 sessions per request.</param>
        /// <param name="after">Read all sessions in the set after (below) this cursor. (optional)</param>
        /// <param name="filter">Filter session by parameters e.g. patientId, externalId, state, createdAfter, updatedAfter, hasDNEyeData, hasImpressionISTData, or hasRxData. CreatedAfter is used for filtering sessions which are created after a specified date. UpdatedAfter is used for filtering sessions which are updated after a specified date.  (Supported values: patientId, externalId, createdAfter, updatedAfter, state, hasDNEyeData, hasImpressionISTData, hasRxData).    A state has the following supported values: (OPEN, CLOSED, ORDERED, EXPORTED, SAVED) (optional)</param>
        /// <param name="sort">List of parameters to sort sessions by parameter.  (Supported values: createdAt, updatedAt).    To sort descending add a &#39;-&#39; as prefix e.g. (-createdAt, -updatedAt). (optional)</param>
        /// <param name="include">List of related resources for including relationships directly into session such as Patient.  (Supported values: patient) (optional)</param>
        /// <returns>SessionsResponse</returns>
        public SessionsResponse GetSessions (int first, string after = default(string), SessionFilter filter = default(SessionFilter), List<string> sort = default(List<string>), List<string> include = default(List<string>))
        {
             ApiResponse<SessionsResponse> localVarResponse = GetSessionsWithHttpInfo(first, after, filter, sort, include);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of sessions. This endpoint implements pagination by using links. Additionally, it is possible to filter by parameters such as patientId, externalId, createdAfter, updatedAfter, hasDNEyeData, hasImpressionISTData, hasRxData or to sort in ascending or descending order. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="first">Read the first n sessions of the set. The default and maximum value is set to 25 sessions per request.</param>
        /// <param name="after">Read all sessions in the set after (below) this cursor. (optional)</param>
        /// <param name="filter">Filter session by parameters e.g. patientId, externalId, state, createdAfter, updatedAfter, hasDNEyeData, hasImpressionISTData, or hasRxData. CreatedAfter is used for filtering sessions which are created after a specified date. UpdatedAfter is used for filtering sessions which are updated after a specified date.  (Supported values: patientId, externalId, createdAfter, updatedAfter, state, hasDNEyeData, hasImpressionISTData, hasRxData).    A state has the following supported values: (OPEN, CLOSED, ORDERED, EXPORTED, SAVED) (optional)</param>
        /// <param name="sort">List of parameters to sort sessions by parameter.  (Supported values: createdAt, updatedAt).    To sort descending add a &#39;-&#39; as prefix e.g. (-createdAt, -updatedAt). (optional)</param>
        /// <param name="include">List of related resources for including relationships directly into session such as Patient.  (Supported values: patient) (optional)</param>
        /// <returns>ApiResponse of SessionsResponse</returns>
        public ApiResponse<SessionsResponse> GetSessionsWithHttpInfo (int first, string after = default(string), SessionFilter filter = default(SessionFilter), List<string> sort = default(List<string>), List<string> include = default(List<string>))
        {
            // verify the required parameter 'first' is set
            if (first == null)
                throw new ApiException(400, "Missing required parameter 'first' when calling SessionsApi->GetSessions");

            var localVarPath = "/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (first != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "first", first)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter

            // TODO: Bugfix for supporting deepObjects as query parameters
            //if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (filter != null)
            {
                foreach (PropertyInfo propertyInfo in filter.GetType().GetProperties().Where(property => property.GetValue(filter, null) != null))
                {
                    if (propertyInfo.PropertyType == typeof(DateTime) || propertyInfo.PropertyType == typeof(DateTime?))
                    {
                        DateTime? dateTimeValue = propertyInfo.GetValue(filter, null) as DateTime?;

                        if (dateTimeValue.HasValue)
                        {
                            localVarQueryParams.Add(new KeyValuePair<string, string>(string.Format("filter[{0}]", char.ToLower(propertyInfo.Name[0]) + propertyInfo.Name.Substring(1)), dateTimeValue.Value.ToString("o")));
                        }
                    }
                    else
                    {
                        localVarQueryParams.Add(new KeyValuePair<string, string>(string.Format("filter[{0}]", char.ToLower(propertyInfo.Name[0]) + propertyInfo.Name.Substring(1)), propertyInfo.GetValue(filter, null).ToString()));
                    }
                }
            }

            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "sort", sort)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "include", include)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionsResponse)));
        }

        /// <summary>
        /// Updates a session or imports a B2BOptic XML document defined by the session ID. This B2BOptic XML document is assigned to an existing session via the defined session ID or assigned to this patient as a new session via the specified id of the session and specified first name, last name, or date of birth of the patient. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session that needs to import data from B2BOptic XML document.</param>
        /// <param name="body">The session to update.</param>
        /// <param name="externalId">External ID of a session used in a 3rd party application to make it referenceable in CNXT (optional)</param>
        /// <param name="patientId">ID of the patient (optional)</param>
        /// <param name="sessionName">Name of the session (optional)</param>
        /// <param name="state">State of the session that needs to import data from B2BOptic XML document.  (Supported values: OPEN, CLOSED, ORDERED, EXPORTED, SAVED) (optional)</param>
        /// <param name="origin">Name of the origin (optional)</param>
        /// <returns>List<string></returns>
        public List<string> ImportB2BOptic (string id, string body, string externalId = default(string), string patientId = default(string), string sessionName = default(string), string state = default(string), string origin = default(string))
        {
             ApiResponse<List<string>> localVarResponse = ImportB2BOpticWithHttpInfo(id, body, externalId, patientId, sessionName, state, origin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a session or imports a B2BOptic XML document defined by the session ID. This B2BOptic XML document is assigned to an existing session via the defined session ID or assigned to this patient as a new session via the specified id of the session and specified first name, last name, or date of birth of the patient. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session that needs to import data from B2BOptic XML document.</param>
        /// <param name="body">The session to update.</param>
        /// <param name="externalId">External ID of a session used in a 3rd party application to make it referenceable in CNXT (optional)</param>
        /// <param name="patientId">ID of the patient (optional)</param>
        /// <param name="sessionName">Name of the session (optional)</param>
        /// <param name="state">State of the session that needs to import data from B2BOptic XML document.  (Supported values: OPEN, CLOSED, ORDERED, EXPORTED, SAVED) (optional)</param>
        /// <param name="origin">Name of the origin (optional)</param>
        /// <returns>ApiResponse of List<string></returns>
        public ApiResponse<List<string>> ImportB2BOpticWithHttpInfo (string id, string body, string externalId = default(string), string patientId = default(string), string sessionName = default(string), string state = default(string), string origin = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionsApi->ImportB2BOptic");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SessionsApi->ImportB2BOptic");

            var localVarPath = "/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/x.b2boptic.jobdata+xml", 
                "application/x.b2boptic.jobdata+xml;version=1.6.3", 
                "application/x.b2boptic.lensorder+xml", 
                "application/x.b2boptic.lensorder+xml;version=1.6.3"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (externalId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalId", externalId)); // query parameter
            if (patientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "patientId", patientId)); // query parameter
            if (sessionName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionName", sessionName)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (origin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "origin", origin)); // query parameter

            // WEBERT: Bugfix for supporting content type application/xml
            if (body != null && body.Contains("<?xml") || localVarHttpContentType == "application/xml")
            {
                localVarPostBody = Regex.Unescape(body).Trim('"');
            }
            else if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportB2BOptic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Creates a session or imports a B2BOptic XML document as a new session which is assigned to an existing patient via Patient id. If the patient does not exist with the given patient id, a new patient is created and the new session is associated accordingly. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The session to create.</param>
        /// <param name="sessionId">Session ID as UUID used in a 3rd party application to make it referenceable in CNXT (optional)</param>
        /// <param name="externalId">External ID of a session used in a 3rd party application to make it referenceable in CNXT (optional)</param>
        /// <param name="patientId">ID of the patient (optional)</param>
        /// <param name="sessionName">Name of the session (optional)</param>
        /// <param name="state">State of the session that needs to import data from B2BOptic XML document.  (Supported values: OPEN, CLOSED, ORDERED, EXPORTED, SAVED) (optional)</param>
        /// <param name="origin">Name of the origin (optional)</param>
        /// <returns>List<string></returns>
        public List<string> ImportB2BOpticAsNewSession (string body, string sessionId = default(string), string externalId = default(string), string patientId = default(string), string sessionName = default(string), string state = default(string), string origin = default(string))
        {
             ApiResponse<List<string>> localVarResponse = ImportB2BOpticAsNewSessionWithHttpInfo(body, sessionId, externalId, patientId, sessionName, state, origin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a session or imports a B2BOptic XML document as a new session which is assigned to an existing patient via Patient id. If the patient does not exist with the given patient id, a new patient is created and the new session is associated accordingly. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The session to create.</param>
        /// <param name="sessionId">Session ID as UUID used in a 3rd party application to make it referenceable in CNXT (optional)</param>
        /// <param name="externalId">External ID of a session used in a 3rd party application to make it referenceable in CNXT (optional)</param>
        /// <param name="patientId">ID of the patient (optional)</param>
        /// <param name="sessionName">Name of the session (optional)</param>
        /// <param name="state">State of the session that needs to import data from B2BOptic XML document.  (Supported values: OPEN, CLOSED, ORDERED, EXPORTED, SAVED) (optional)</param>
        /// <param name="origin">Name of the origin (optional)</param>
        /// <returns>ApiResponse of List<string></returns>
        public ApiResponse<List<string>> ImportB2BOpticAsNewSessionWithHttpInfo (string body, string sessionId = default(string), string externalId = default(string), string patientId = default(string), string sessionName = default(string), string state = default(string), string origin = default(string))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SessionsApi->ImportB2BOpticAsNewSession");

            var localVarPath = "/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/x.b2boptic.jobdata+xml", 
                "application/x.b2boptic.jobdata+xml;version=1.6.3", 
                "application/x.b2boptic.lensorder+xml", 
                "application/x.b2boptic.lensorder+xml;version=1.6.3"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionId", sessionId)); // query parameter
            if (externalId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "externalId", externalId)); // query parameter
            if (patientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "patientId", patientId)); // query parameter
            if (sessionName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionName", sessionName)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (origin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "origin", origin)); // query parameter

            // WEBERT: Bugfix for supporting content type application/xml
            if (body != null && body.Contains("<?xml") || localVarHttpContentType == "application/xml")
            {
                localVarPostBody = Regex.Unescape(body).Trim('"');
            }
            else if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportB2BOpticAsNewSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Updates a session. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session that needs to update.</param>
        /// <param name="sessionInput">The session to update.</param>
        /// <param name="origin">Name of the origin (optional)</param>
        /// <returns>SessionResponse</returns>
        public SessionResponse UpdateSession(string id, SessionInput sessionInput, string origin = default(string))
        {
            ApiResponse<SessionResponse> localVarResponse = UpdateSessionWithHttpInfo(id, sessionInput, origin);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a session. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session that needs to update.</param>
        /// <param name="sessionInput">The session to update.</param>
        /// <param name="origin">Name of the origin (optional)</param>
        /// <returns>ApiResponse of SessionResponse</returns>
        public ApiResponse<SessionResponse> UpdateSessionWithHttpInfo(string id, SessionInput sessionInput, string origin = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionsApi->UpdateSession");
            // verify the required parameter 'sessionInput' is set
            if (sessionInput == null)
                throw new ApiException(400, "Missing required parameter 'sessionInput' when calling SessionsApi->UpdateSession");

            var localVarPath = "/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (origin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "origin", origin)); // query parameter
            if (sessionInput != null && sessionInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sessionInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sessionInput; // byte array
            }

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionResponse)));
        }

        /// <summary>
        /// Patches a session. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <param name="sessionInput">The session to patch.</param>
        /// <returns>SessionResponse</returns>
        public SessionResponse PatchSession (string id, SessionInput sessionInput)
        {
             ApiResponse<SessionResponse> localVarResponse = PatchSessionWithHttpInfo(id, sessionInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patches a session. 
        /// </summary>
        /// <exception cref="CNXT.Connector.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the session</param>
        /// <param name="sessionInput">The session to patch.</param>
        /// <returns>ApiResponse of SessionResponse</returns>
        public ApiResponse<SessionResponse> PatchSessionWithHttpInfo (string id, SessionInput sessionInput)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionsApi->PatchSession");
            // verify the required parameter 'sessionInput' is set
            if (sessionInput == null)
                throw new ApiException(400, "Missing required parameter 'sessionInput' when calling SessionsApi->PatchSession");

            var localVarPath = "/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionInput != null && sessionInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sessionInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sessionInput; // byte array
            }

            // authentication (oAuth2AuthCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionResponse)));
        }

    }
}
